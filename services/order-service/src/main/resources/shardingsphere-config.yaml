dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/tt_order_0?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    username: root
    password: root

  ds_1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/tt_order_1?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    username: root
    password: root

rules:
  # 数据分片
  - !SHARDING
    tables:
      # 逻辑表名
      t_order:
        # 节点名称：由数据源 + 表名组成
        actualDataNodes: ds_${0..1}.t_order_${0..31}
        # 分库策略
        databaseStrategy:
          # standard, complex, hint 三选一
          # complex 用于多分片键分片场景
          complex:
            # 分片列名称，多个用逗号隔离
            shardingColumns: user_id,order_sn
            # 分片算法名称，自定义
            shardingAlgorithmName: order_database_complex_mod
        # 分表策略
        tableStrategy:
          complex:
            shardingColumns: user_id,order_sn
            shardingAlgorithmName: order_table_complex_mod
      t_order_item:
        actualDataNodes: ds_${0..1}.t_order_item_${0..31}
        databaseStrategy:
          complex:
            shardingColumns: user_id,order_sn
            shardingAlgorithmName: order_item_database_complex_mod
        tableStrategy:
          complex:
            shardingColumns: user_id,order_sn
            shardingAlgorithmName: order_item_table_complex_mod
      t_order_item_passenger:
        actualDataNodes: ds_${0..1}.t_order_item_passenger_${0..31}
        databaseStrategy:
          standard:
            shardingColumn: id_card
            shardingAlgorithmName: order_passenger_relation_database_mod
        tableStrategy:
          standard:
            shardingColumn: id_card
            shardingAlgorithmName: order_passenger_relation_table_mod
    # 配置自定义分片算法
    shardingAlgorithms:
      # 分片算法名称
      order_database_complex_mod:
        # 分片类型，表示这个算法由java代码实现
        type: CLASS_BASED
        # 属性配置
        props:
          algorithmClassName: com.chanris.tt.biz.orderservice.dao.algorithm.OrderCommonDataBaseComplexAlgorithm
          sharding-count: 32
          table-sharding-count: 16
          strategy: complex
      order_table_complex_mod:
        type: CLASS_BASED
        props:
          algorithmClassName: com.chanris.tt.biz.orderservice.dao.algorithm.OrderCommonTableComplexAlgorithm
          sharding-count: 32
          strategy: complex
      order_item_database_complex_mod:
        type: CLASS_BASED
        props:
          algorithmClassName: com.chanris.tt.biz.orderservice.dao.algorithm.OrderCommonDataBaseComplexAlgorithm
          sharding-count: 32
          table-sharding-count: 16
          strategy: complex
      order_item_table_complex_mod:
        type: CLASS_BASED
        props:
          algorithmClassName: com.chanris.tt.biz.orderservice.dao.algorithm.OrderCommonTableComplexAlgorithm
          sharding-count: 32
          strategy: complex
      order_passenger_relation_database_mod:
        type: CLASS_BASED
        props:
          sharding-count: 32
          table-sharding-count: 16
          strategy: standard
          algorithmClassName: com.chanris.tt.framework.starter.database.algorithm.sharding.CustomDbHashModShardingAlgorithm
      order_passenger_relation_table_mod:
        type: HASH_MOD
        props:
          sharding-count: 32
  - !ENCRYPT
    tables:
      t_order_item:
        columns:
          id_card:
            cipherColumn: id_card
            encryptorName: common_encryptor
          phone:
            cipherColumn: phone
            encryptorName: common_encryptor
        queryWithCipherColumn: true
    encryptors:
      common_encryptor:
        type: AES
        props:
          aes-key-value: d6oadClrrb9A3GWo
props:
  sql-show: true